
Table users {
  user_id integer [default: `gen_random_uuid()`]
  username varchar [not null]
  name varchar [not null]
  email varchar[] [not null]
  phone integer
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  deleted_at timestamp
  profile_image varchar
  location_data_ref varchar [not null, default: "", note: "Default is user_id"]
  privacy_settings varchar [not null, default: "default"]

  indexes {
    user_id [pk]
    username
    email
    phone
  }
}

Table follows {
  follower_id integer [not null, ref: > users.user_id]
  following_id integer [not null, ref: > users.user_id]
  tier varchar [default: 'regular']
  followed_at timestamp [not null, default: `now()`]

  indexes {
    (follower_id, following_id) [pk]
  }
}

Table groups {
  group_id integer [default: `gen_random_uuid()`]
  owner_id integer [not null, ref: > users.user_id]
  name varchar
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  deleted_at timestamp
  profile_image varchar
  location_data_ref varchar [not null, default: "", note: "Default is group_id"]

  indexes {
    group_id [pk]
  }
}

Table group_members {
  group_id integer [not null, ref: > groups.group_id]
  user_id integer [not null, ref: > users.user_id]
  joined_at timestamp [not null, default: `now()`]

  indexes {
    (group_id, user_id) [pk]
  }
}

Table trips {
  trip_id integer [default: `gen_random_uuid()`]
  title varchar [not null]
  description text
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  deleted_at timestamp
  trip_image varchar
  start_date date [not null, default: `now()`]
  end_date date
  location_data_ref varchar [not null, default: "", note: "Default is trip_id"]

  indexes {
    trip_id [pk]
  }
}

Table user_trips {
  user_id integer [ref: > users.user_id]
  trip_id integer [ref: > trips.trip_id]

  indexes {
    (user_id, trip_id) [pk]
  }
}

Table group_trips {
  group_id integer [ref: > groups.group_id]
  trip_id integer [ref: > trips.trip_id]

  indexes {
    (group_id, trip_id) [pk]
  }
}